'use strict';

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
var test = require('tape');
var hasSymbols = require('../');
var runSymbolTests = require('./tests');
test('interface', function (t) {
  t.equal(_typeof(hasSymbols), 'function', 'is a function');
  t.equal(_typeof(hasSymbols()), 'boolean', 'returns a boolean');
  t.end();
});
test('Symbols are supported', {
  skip: !hasSymbols()
}, function (t) {
  runSymbolTests(t);
  t.end();
});
test('Symbols are not supported', {
  skip: hasSymbols()
}, function (t) {
  t.equal(typeof Symbol === "undefined" ? "undefined" : _typeof(Symbol), 'undefined', 'global Symbol is undefined');
  t.equal(_typeof(Object.getOwnPropertySymbols), 'undefined', 'Object.getOwnPropertySymbols does not exist');
  t.end();
});